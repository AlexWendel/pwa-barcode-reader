{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,W,O,C,G,I,E,E,SC+FA,EA7FA,MACE,YAAY,CAAG,CAAE,CAAM,CAAE,CACvB,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,QAAQ,CAAG,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,IAChB,IAAI,CAAC,SAAS,CAAG,KACjB,IAAI,CAAC,cAAc,CAAG,KAAO,CAC/B,CAEA,SAAU,CACR,GAAI,CAAC,IAAI,CAAC,GAAG,EAAI,CAAC,IAAI,CAAC,MAAM,CAAE,YAC7B,IAAI,CAAC,cAAc,CAAC,QAAS,0BAI/B,CAAA,IAAI,CAAC,SAAS,CAAG,IAAI,UAAU,IAAI,CAAC,GAAG,EAEvC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,KACtB,IAAI,CAAC,cAAc,CAAC,kBACpB,IAAM,EAAc,CAClB,KAAM,OACN,QAAS,CACP,UAAW,IAAI,CAAC,QAAQ,CACxB,YAAa,QACf,CACF,EACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,IAEnC,IAAM,EAAc,CAClB,KAAM,OACN,QAAS,CACP,QAAW,IAAI,CAAC,MAAM,AACxB,CACF,EAEA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,GACrC,EAEA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAG,AAAA,IACzB,IAAM,EAAU,KAAK,KAAK,CAAC,EAAM,IAAI,EAGrC,GAFA,QAAQ,GAAG,CAAC,GAER,AAAiB,gBAAjB,EAAQ,IAAI,CAAoB,YAClC,IAAI,CAAC,cAAc,CAAC,aAItB,GAAI,AAAiB,UAAjB,EAAQ,IAAI,CAAc,CAC5B,IAAI,CAAC,cAAc,CAAC,QAAS,EAAQ,OAAO,CAAC,OAAO,EACpD,IAAI,CAAC,UAAU,GACf,MACF,CAIA,IAAI,CAAC,cAAc,CAAC,WACpB,IAAM,EAAc,CAClB,KAAM,OACN,QAAS,CACP,QAAS,IAAI,CAAC,MAAM,AACtB,CACF,EACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,GACrC,EAEA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAG,KACvB,IAAI,CAAC,cAAc,CAAC,eACtB,EAEA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAG,KACvB,IAAI,CAAC,cAAc,CAAC,QAAS,kBAC/B,CACF,CAEA,YAAa,CACP,IAAI,CAAC,SAAS,EAChB,IAAI,CAAC,SAAS,CAAC,KAAK,EAExB,CAEA,SAAS,CAAI,CAAE,CACT,IAAI,CAAC,SAAS,EAAI,IAAI,CAAC,SAAS,CAAC,UAAU,GAAK,UAAU,IAAI,EAOhE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CANlB,CACd,KAAM,OACN,QAAS,CACP,KAAM,CACR,CACF,GAGJ,CACF,C,G,E,Q,S,C,C,C,E,E,E,O,C,gB,W,O,C,GCtFO,SAAS,IAGd,IAAM,EAAK,UAAU,SAAS,CAC1B,EAAW,YAuBf,MArBI,UAAU,IAAI,CAAC,GACjB,EAAW,UACF,MAAM,IAAI,CAAC,GACpB,EAAW,MACF,QAAQ,IAAI,CAAC,GACtB,EAAW,QACF,UAAU,IAAI,CAAC,GACxB,EAAW,UACF,mBAAmB,IAAI,CAAC,IACjC,CAAA,EAAW,KADN,EAIH,SAAS,IAAI,CAAC,GAChB,GAAY,UACH,UAAU,IAAI,CAAC,GACxB,GAAY,WACH,SAAS,IAAI,CAAC,IAAO,CAAC,SAAS,IAAI,CAAC,IAC7C,CAAA,GAAY,SADP,EAIP,GAAY,IAAM,KAAK,KAAK,CAAC,AAAgB,IAAhB,KAAK,MAAM,GAE1C,C,G,E","sources":["<anon>","src/js/services/relay.js","src/js/utils/uuid.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirea202\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirea202\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gTLMZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $c4d6da56de831332$export$2e2bcd8739ae039; });\n\nvar $7kGMO = parcelRequire(\"7kGMO\");\nclass $c4d6da56de831332$var$RelayService {\n    constructor(url, roomId){\n        this.url = url;\n        this.roomId = roomId;\n        this.clientId = (0, $7kGMO.getDeviceUUID)();\n        this.websocket = null;\n        this.onStatusChange = ()=>{};\n    }\n    connect() {\n        if (!this.url || !this.roomId) {\n            this.onStatusChange('error', 'Missing URL or Room ID.');\n            return;\n        }\n        this.websocket = new WebSocket(this.url);\n        this.websocket.onopen = ()=>{\n            this.onStatusChange('authenticating');\n            const authMessage = {\n                type: 'auth',\n                payload: {\n                    client_id: this.clientId,\n                    client_type: 'LEITOR'\n                }\n            };\n            this.websocket.send(JSON.stringify(authMessage));\n            const joinMessage = {\n                type: 'join',\n                payload: {\n                    \"room_id\": this.roomId\n                }\n            };\n            this.websocket.send(JSON.stringify(joinMessage));\n        };\n        this.websocket.onmessage = (event)=>{\n            const message = JSON.parse(event.data);\n            console.log(message);\n            if (message.type === 'joined_room') {\n                this.onStatusChange('connected');\n                return;\n            }\n            if (message.type === 'error') {\n                this.onStatusChange('error', message.payload.message);\n                this.disconnect();\n                return;\n            }\n            // After successful auth, the server does not send a specific message back to the LEITOR.\n            // So, we assume auth is successful and proceed to join the room.\n            this.onStatusChange('joining');\n            const joinMessage = {\n                type: 'join',\n                payload: {\n                    room_id: this.roomId\n                }\n            };\n            this.websocket.send(JSON.stringify(joinMessage));\n        };\n        this.websocket.onclose = ()=>{\n            this.onStatusChange('disconnected');\n        };\n        this.websocket.onerror = ()=>{\n            this.onStatusChange('error', 'WebSocket error');\n        };\n    }\n    disconnect() {\n        if (this.websocket) this.websocket.close();\n    }\n    sendData(data) {\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'code',\n                payload: {\n                    data: data\n                }\n            };\n            this.websocket.send(JSON.stringify(message));\n        }\n    }\n}\nvar $c4d6da56de831332$export$2e2bcd8739ae039 = $c4d6da56de831332$var$RelayService;\n\n});\nparcelRegister(\"7kGMO\", function(module, exports) {\n\n$parcel$export(module.exports, \"getDeviceUUID\", function () { return $556b971e948b3619$export$f5755ecee83d0ab5; });\n/**\n * Generates a unique identifier for the device.\n * It uses the user agent to determine the OS and combines it with a random identifier.\n * The result is stored in localStorage to be persistent for the device.\n *\n * @returns {string} - The device's unique id.\n */ function $556b971e948b3619$export$f5755ecee83d0ab5() {\n    // ---------- Device name automático pelo userAgent ----------\n    const ua = navigator.userAgent;\n    let deviceId = 'WebDevice';\n    if (/Windows/.test(ua)) deviceId = 'Windows';\n    else if (/Mac/.test(ua)) deviceId = 'Mac';\n    else if (/Linux/.test(ua)) deviceId = 'Linux';\n    else if (/Android/.test(ua)) deviceId = 'Android';\n    else if (/iPhone|iPad|iPod/.test(ua)) deviceId = 'iOS';\n    if (/Chrome/.test(ua)) deviceId += '-Chrome';\n    else if (/Firefox/.test(ua)) deviceId += '-Firefox';\n    else if (/Safari/.test(ua) && !/Chrome/.test(ua)) deviceId += '-Safari';\n    deviceId += '-' + Math.floor(Math.random() * 1000); // Para diferenciar múltiplos clientes iguais\n    return deviceId;\n}\n\n});\n\n\n\nparcelRequire(\"gTLMZ\");\n\n//# sourceMappingURL=barcode-scanner-main.4459ca19.js.map\n","import { getDeviceUUID } from '../utils/uuid.js';\n\nclass RelayService {\n  constructor(url, roomId) {\n    this.url = url;\n    this.roomId = roomId;\n    this.clientId = getDeviceUUID();\n    this.websocket = null;\n    this.onStatusChange = () => {};\n  }\n\n  connect() {\n    if (!this.url || !this.roomId) {\n      this.onStatusChange('error', 'Missing URL or Room ID.');\n      return;\n    }\n\n    this.websocket = new WebSocket(this.url);\n\n    this.websocket.onopen = () => {\n      this.onStatusChange('authenticating');\n      const authMessage = {\n        type: 'auth',\n        payload: {\n          client_id: this.clientId,\n          client_type: 'LEITOR'\n        },\n      };\n      this.websocket.send(JSON.stringify(authMessage));\n\n      const joinMessage = {\n        type: 'join',\n        payload: {\n          \"room_id\": this.roomId\n        }\n      };\n\n      this.websocket.send(JSON.stringify(joinMessage));\n    };\n\n    this.websocket.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log(message);\n\n      if (message.type === 'joined_room') {\n        this.onStatusChange('connected');\n        return;\n      }\n\n      if (message.type === 'error') {\n        this.onStatusChange('error', message.payload.message);\n        this.disconnect();\n        return;\n      }\n\n      // After successful auth, the server does not send a specific message back to the LEITOR.\n      // So, we assume auth is successful and proceed to join the room.\n      this.onStatusChange('joining');\n      const joinMessage = {\n        type: 'join',\n        payload: {\n          room_id: this.roomId,\n        },\n      };\n      this.websocket.send(JSON.stringify(joinMessage));\n    };\n\n    this.websocket.onclose = () => {\n      this.onStatusChange('disconnected');\n    };\n\n    this.websocket.onerror = () => {\n      this.onStatusChange('error', 'WebSocket error');\n    };\n  }\n\n  disconnect() {\n    if (this.websocket) {\n      this.websocket.close();\n    }\n  }\n\n  sendData(data) {\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n      const message = {\n        type: 'code',\n        payload: {\n          data: data,\n        },\n      };\n      this.websocket.send(JSON.stringify(message));\n    }\n  }\n}\n\nexport default RelayService;\n","/**\n * Generates a unique identifier for the device.\n * It uses the user agent to determine the OS and combines it with a random identifier.\n * The result is stored in localStorage to be persistent for the device.\n *\n * @returns {string} - The device's unique id.\n */\nexport function getDeviceUUID() {\n\n  // ---------- Device name automático pelo userAgent ----------\n  const ua = navigator.userAgent;\n  let deviceId = 'WebDevice';\n\n  if (/Windows/.test(ua)) {\n    deviceId = 'Windows';\n  } else if (/Mac/.test(ua)) {\n    deviceId = 'Mac';\n  } else if (/Linux/.test(ua)) {\n    deviceId = 'Linux';\n  } else if (/Android/.test(ua)) {\n    deviceId = 'Android';\n  } else if (/iPhone|iPad|iPod/.test(ua)) {\n    deviceId = 'iOS';\n  }\n\n  if (/Chrome/.test(ua)) {\n    deviceId += '-Chrome';\n  } else if (/Firefox/.test(ua)) {\n    deviceId += '-Firefox';\n  } else if (/Safari/.test(ua) && !/Chrome/.test(ua)) {\n    deviceId += '-Safari';\n  }\n\n  deviceId += '-' + Math.floor(Math.random() * 1000); // Para diferenciar múltiplos clientes iguais\n  return deviceId;\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$c4d6da56de831332$export$2e2bcd8739ae039","$7kGMO","constructor","url","roomId","clientId","getDeviceUUID","websocket","onStatusChange","connect","WebSocket","onopen","authMessage","type","payload","client_id","client_type","send","JSON","stringify","joinMessage","onmessage","event","message","parse","data","console","log","disconnect","room_id","onclose","onerror","close","sendData","readyState","OPEN","$556b971e948b3619$export$f5755ecee83d0ab5","ua","navigator","userAgent","deviceId","test","Math","floor","random"],"version":3,"file":"barcode-scanner-main.4459ca19.js.map"}